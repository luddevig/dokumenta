%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 6.0%%AI8_CreatorVersion: 10.0%%For: ( ) (Terran Overlord Government)%%Title: (logga-text-farg-locked.eps)%%CreationDate: 10/1/03 9:29 PM%%BoundingBox: 350 222 497 369%%HiResBoundingBox: 350.9932 222.626 496.4102 368.043%%DocumentProcessColors: Cyan Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.0 0%%+ procset Adobe_pattern_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_Cropmarks: 348.1426 219.7754 499.2607 370.8936%AI3_TemplateBox: 421.5 296.7754 421.5 296.7754%AI3_TileBox: 23 18 820 578%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 841.8898 595.2756%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 254 424.2754 2 1266 801 26 1 1 7 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:23 18%%AI3_PaperRect:-23 578 819 -17%%AI3_Margin:23 -18 -22 17%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black, White Radial)(Black, White Radial) 1 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 0 0 1 50 0 %_Bs0 0 0 1 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Copper)(Copper) 0 7 Bd[<5E5E5D5D5C5B5B5A5A595958585757565655555454535352525150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464645444443434242414140403F3F3E3E3D3D3C3C3B3B3A39393838373736363535343433333232313130302F2F2E2D2D2C2C2B2B2A2A292928282727262625252424232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919181817161615151414131312121111><9A9998989796959493929291908F8E8D8C8C8B8A8988878686858483828181807F7E7D7C7B7B7A79787776757574737271706F6F6E6D6C6B6A6969686766656463636261605F5E5D5D5C5B5A5958575756555453525151504F4E4D4C4B4B4A49484746454544434241403F3F3E3D3C3B3A3A39383736353434333231302F2E2E2D2C2B2A2928282726252423222221201F1E1D1C1C><B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D><12121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909080808080808080807070707070707070606060606060606050505050505050504040404040404040403030303030303030202020202020202010101010101010100000000>1 %_Br<737373737373737373737373737373737373737373737372727272727272727271717171717170707070706F6F6F6F6F6E6E6E6E6D6D6D6D6C6C6C6B6B6B6A6A6A69696968686767676666656564646463636262616160605F5F5E><BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABAAAAA9A9A8A7A7A6A5A4A4A3A2A2A1A09F9E9E9D9C9B9A><D9D9D9D9D9D9D9D9D9D9D9D9D8D8D8D8D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D5D5D5D5D4D4D4D3D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCBCBCACAC9C9C8C7C7C6C5C5C4C3C2C2C1C0BFBFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1><28282828282828272727272727272727272727272727272727262626262626262625252525252524242424242323232323222222212121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1A1A1A191918181717161615151414131312>1 %_Br<5E5F5F6060616162626364646565666667676868696A6A6B6B6C6C6D6D6E6E6F7070717172727373><9A9B9C9D9E9F9FA0A1A2A3A4A5A6A6A7A8A9AAABACADADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBBBC><B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9><12131314141516161717181819191A1A1B1C1C1D1D1E1E1F1F202021222223232424252526262728>1 %_Br<0001010202030304040505060607070809090A0A0B0B0C0C0D0D0E0E0F0F1010111212131314141515161617171818191A1A1B1B1C1C1D1D1E1E1F1F202021212223232424252526262727282829292A2B2B2C2C2D2D2E2E2F2F303031313232333434353536363737383839393A3A3B3C3C3D3D3E3E3F3F404041414242434344454546464747484849494A4A4B4B4C4D4D4E4E4F4F505051515252535354555556565757585859595A5A5B5B5C5C5D5E5E><00010203030405060708090A0A0B0C0D0E0F1011111213141516171818191A1B1C1D1E1E1F20212223242525262728292A2B2C2C2D2E2F3031323333343536373839393A3B3C3D3E3F4040414243444546474748494A4B4C4D4E4E4F50515253545455565758595A5B5B5C5D5E5F6061626263646566676869696A6B6C6D6E6F6F70717273747576767778797A7B7C7D7D7E7F80818283848485868788898A8A8B8C8D8E8F9091919293949596979898999A><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1><0000000000010101010101010101010202020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060607070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F101010101010101010111111111111111111111212121212121212>1 %_Br<24232222212120201F1F1E1D1D1C1C1B1B1A1919181817171615151414131312121110100F0F0E0E0D0C0C0B0B0A0A0908080707060605050403030202010100><3B3A39383737363534333231302F2E2D2C2B2A29282827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A0908080706050403020100><403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242322211F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><01010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<59595858585757575656565555555454545353535252525151515050504F4F4F4E4E4E4D4D4D4C4C4C4B4B4B4A4A4A4949494848484747474646464545454444444343434242424141414040403F3F3F3E3E3E3D3D3D3C3C3C3B3B3A3A3A3939393838383737373636363535353434343333333232323131313030302F2F2F2E2E2E2D2D2D2C2C2C2B2B2B2A2A2A292929282828272727262626252525242424><ADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929191908F8E8E8D8C8B8B8A89898887868685848483828181807F7F7E7D7C7C7B7A7A79787777767575747372727170706F6E6D6D6C6B6B6A69686867666665646363626161605F5E5E5D5C5C5B5A59595857565655545453525151504F4F4E4D4C4C4B4A4A49484747464545444342424140403F3E3D3D3C3B><DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140><0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A090909090909090909090908080808080808080808080707070707070707070707070606060606060606060606050505050505050505050504040404040404040404040303030303030303030303030202020202020202020202010101010101010101>1 %_Br[0.0656 0.1081 0.1138 0.0003 1 50 100 %_Bs0.3689 0.6046 0.6942 0.0716 1 50 85 %_Bs0.4526 0.7386 0.8504 0.1551 1 73.9136 75 %_Bs0.3689 0.6046 0.6942 0.0716 1 50 63 %_Bs0 0 0 0 1 50 34 %_Bs0.1397 0.2324 0.251 0.0029 1 50 14 %_Bs0.3494 0.6791 0.8753 0.0583 1 50 2 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302>0.9882<0505050505050505050505050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080808080808080808080808>01 %_Br<E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9><1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC><0909090909090909090909090909090909090909090909090909090909090808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080807070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505>01 %_Br<ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8><131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09>01 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC><05050505050505050506060606060606060606060606060606070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101010101111111111111111111111111111111112121212121212121212121212121212131313131313131313><E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF>01 %_Br<03030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808><F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605>0.913701 %_Br[0.0078 0.9882 0.0314 0 1 50 100 %_Bs0.9765 0.9882 0.0196 0 1 50 80 %_Bs0.9098 0.0784 0.0353 0 1 50 60 %_Bs0.9255 0.0745 0.9373 0 1 50 40 %_Bs0.0314 0.0196 0.9137 0 1 50 20 %_Bs0.0118 0.9608 0.9137 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Tropical Sunset)(Tropical Sunset) 0 5 Bd[0<BFBEBDBCBBBAB9B8B7B6B5B4B3B2B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C9B9A9A99989796959493939291908F8E8E8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A7A79787777767575747372727170706F6E6D6D6C6B6B6A696968676766666564646362626161605F5F5E5E5D5C5C5B5B5A5A595858575756565555545453535252515150504F4F4E4E4D4D4D4C4C4B4B4B4A4A49494948484747474646464545454444444443434343424242424141414141414040404040404040><BFBFBFBFBFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7>01 %_Br<08080808080808080808080807070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060505050505050505050505050505050505050505050505040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101000000000000000000000000><05060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF><E9E9E9E8E8E8E8E7E7E7E7E7E6E6E6E6E5E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E2E1E1E1E1E0E0E0E0E0DFDFDFDFDEDEDEDEDEDDDDDDDDDCDCDCDCDCDBDBDBDBDADADADADAD9D9D9D9D8D8D8D8D7D7D7D7D7D6D6D6D6D5D5D5D5D5D4D4D4D4D3D3D3D3D3D2D2D2D2D1D1D1D1D1D0D0D0D0CFCFCFCFCFCECECECECDCDCDCDCCCCCCCCCCCBCBCBCBCACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C6C6C5C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C1C0C0C0C0BFBF>01 %_Br<202020201F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A191919191919191919181818181818181818181717171717171717171716161616161616161616151515151515151515151414141414141414141313131313131313131312121212121212121212111111111111111111111010101010101010100F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A090909090909090909090808080808><696868676766666665656464636363626261616060605F5F5E5E5D5D5D5C5C5B5B5A5A5A59595858575757565655555454545353525251515150504F4F4E4E4E4D4D4C4C4B4B4B4A4A4949494848474746464645454444434343424241414040403F3F3E3E3D3D3D3C3C3B3B3A3A3A39393838373737363635353434343333323231313130302F2F2E2E2E2D2D2C2C2B2B2B2A2A29292828282727262625252524242323222222212120201F1F1F1E1E1D1D1C1C1C1B1B1A1A1A19191818171717161615151414141313121211111110100F0F0E0E0E0D0D0C0C0B0B0B0A0A0909080808070706060505><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9>01 %_Br<CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120><000101020203040405050607070809090A0A0B0C0C0D0D0E0F0F101011121213131415151616171818191A1A1B1B1C1D1D1E1E1F20202121222323242425262627282829292A2B2B2C2C2D2E2E2F2F303131323233343435353637373839393A3A3B3C3C3D3D3E3F3F404041424243434445454647474848494A4A4B4B4C4D4D4E4E4F50505151525353545455565657585859595A5B5B5C5C5D5E5E5F5F606161626263646465666667676869>001 %_Br[0 0.25 0.78 0 1 50 100 %_Bs0 0.75 0.75 0 1 35.5263 57.3034 %_Bs0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs0.125 0.41 0 0 1 50 44.9438 %_Bs0.8 0 0 0 1 50 19.1011 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Violet Eye)(Violet Eye) 1 5 Bd[<FFFFFFFFFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9><FFFEFEFDFCFCFBFAFAF9F9F8F7F7F6F6F5F4F4F3F3F2F1F1F0F0EFEEEEEDEDECECEBEAEAE9E9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACACAC9C9C8C8C8C7C7C7C6C6C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBABABABAB9B9B9B8B8B8B8B7B7B7B7B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B2B1B1B1B1B0B0B0B0AFAFAFAFAFAEAEAEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A3A2A2A2A2A2A2A2A2A2A1A1A1A1A1A1A1A1A1A0A0A0A0A0A0A0A0A0A09F9F9F9F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E9E9E9E9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898><060606060606060606060606060605050505050505050505050505050505050505050505050505050505050504040404040404040404040404040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><FFFDFCFAF9F7F5F4F2F1EFEEECEBE9E8E6E5E3E2E0DFDDDCDAD9D7D6D5D3D2D0CFCECCCBC9C8C7C5C4C3C1C0BFBDBCBBBAB8B7B6B5B3B2B1B0AEADACABAAA8A7A6A5A4A2A1A09F9E9D9C9A999897969594939291908F8D8C8B8A898887868584838281807F7E7D7C7C7B7A79787776757473727170706F6E6D6C6B6A6A6968676665656463626161605F5E5D5D5C5B5A5A59585757565555545352525150504F4E4E4D4C4C4B4A4A494848474646454544434342424140403F3F3E3D3D3C3C3B3B3A3A39393837373636353534343333323231313030302F2F2E2E2D2D2C2C2B2B2B2A2A29292828282727262626252524242423232322222121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A191919181818181717171616161615151515141414141313131312121212111111111110101010100F0F0F0F0F0E0E0E0E0E0D0D0D0D0D0D0C0C0C0C0C0B0B0B0B0B0B0B0A0A0A0A0A0A09090909090909090808080808080808070707070707070706060606060606060606050505050505050505050504040404040404040404040404040303030303030303030303030303030302020202020202020202020202020202020202020202010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<E9E9E9E9E9E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDDDCDCDCDCDC><9897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625>001 %_Br<DCDCDCDCDBDBDBDBDBDADADAD9D9D9D8D8D8D7D7D7D6D6D5D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCECECDCDCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B2B2B1B0B0AFAEADADACABAAAAA9A8A7A7A6A5A4A4A3A2A1A1A09F9E9D9D9C9B9A9999989796959494939291908F><252525252626262627272728282829292A2A2A2B2B2C2C2D2D2E2E2F2F30303131323233343435353637373838393A3A3B3C3C3D3E3E3F40404142434344454646474849494A4B4C4C4D4E4F505051525354545556575859595A5B5C5D5E5F5F60616263646566676868696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202>01 %_Br<8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><807F7E7D7C7B7A79787777767574737271706F6F6E6D6C6B6A69686767666564636261605F5F5E5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2D2C2B2A29282726252524232221201F1E1D1D1C1B1A19181716151514131211100F0E0D0C0C0B0A0908070605040403020100><020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000>01 %_Br[1 1 0.0235 1 1 16.6667 25.8427 %_Bs0.9137 0.5961 0 0 1 50 49.4382 %_Bs0.8627 0.1451 0 0 1 61.5385 64.6067 %_Bs0.5623 0.5 0.007 0 1 50 70.2247 %_Bs0 0 0 0 1 50 78.6517 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 0 1 1 50 100 %_Bs0 0 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Azure Rings)(Azure Rings) 22.5 22.5 58.5 58.5 [%AI3_Tile(0 O 0 R 0.9569 0.9294 0 0 k 0.9569 0.9294 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1.75 w 4 M []0 d0 XR40.5 58.5 m40.5 48.5586 32.4409 40.5 22.5 40.5 c12.5591 40.5 4.5 48.5586 4.5 58.5 c4.5 68.4414 12.5591 76.5 22.5 76.5 c32.4409 76.5 40.5 68.4414 40.5 58.5 cs40.5 22.5 m40.5 12.5586 32.4409 4.5 22.5 4.5 c12.5591 4.5 4.5 12.5586 4.5 22.5 c4.5 32.4414 12.5591 40.5 22.5 40.5 c32.4409 40.5 40.5 32.4414 40.5 22.5 cs40.5 40.5 m40.5 30.5586 32.4409 22.5 22.5 22.5 c12.5591 22.5 4.5 30.5586 4.5 40.5 c4.5 50.4414 12.5591 58.5 22.5 58.5 c32.4409 58.5 40.5 50.4414 40.5 40.5 cs58.5 58.5 m58.5 48.5586 50.4409 40.5 40.5 40.5 c30.5591 40.5 22.5 48.5586 22.5 58.5 c22.5 68.4414 30.5591 76.5 40.5 76.5 c50.4409 76.5 58.5 68.4414 58.5 58.5 cs58.5 22.5 m58.5 12.5586 50.4409 4.5 40.5 4.5 c30.5591 4.5 22.5 12.5586 22.5 22.5 c22.5 32.4414 30.5591 40.5 40.5 40.5 c50.4409 40.5 58.5 32.4414 58.5 22.5 cs58.5 40.5 m58.5 30.5586 50.4409 22.5 40.5 22.5 c30.5591 22.5 22.5 30.5586 22.5 40.5 c22.5 50.4414 30.5591 58.5 40.5 58.5 c50.4409 58.5 58.5 50.4414 58.5 40.5 cs76.5 58.5 m76.5 48.5586 68.4409 40.5 58.5 40.5 c48.5591 40.5 40.5 48.5586 40.5 58.5 c40.5 68.4414 48.5591 76.5 58.5 76.5 c68.4409 76.5 76.5 68.4414 76.5 58.5 cs76.5 22.5 m76.5 12.5586 68.4409 4.5 58.5 4.5 c48.5591 4.5 40.5 12.5586 40.5 22.5 c40.5 32.4414 48.5591 40.5 58.5 40.5 c68.4409 40.5 76.5 32.4414 76.5 22.5 cs76.5 40.5 m76.5 30.5586 68.4409 22.5 58.5 22.5 c48.5591 22.5 40.5 30.5586 40.5 40.5 c40.5 50.4414 48.5591 58.5 58.5 58.5 c68.4409 58.5 76.5 50.4414 76.5 40.5 cs%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Camouflage)(Camouflage) 1 1 73 73 [%AI3_Tile(0 O 0 R 0.6 0.1412 0.9373 0.0275 k 0.6 0.1412 0.9373 0.0275 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 73 m1 1 L73 1 L73 73 L1 73 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.3529 0.9529 0.2 k 0.4941 0.3529 0.9529 0.2 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR18.5449 73 m18.5449 1 L46.7832 1 L46.7832 73 L18.5449 73 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1882 0.1098 0.9059 0.0157 k 0.1882 0.1098 0.9059 0.0157 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR11.9512 1 m11.9512 4.7129 9.2314 2.8813 9.2314 6.5938 c9.2314 10.2334 4.25 10.2334 4.25 13.8735 c4.25 17.4858 10.0313 17.4858 10.0313 21.0991 c10.0313 24.832 10.208 24.832 10.208 28.5654 c10.208 32.3071 5.5205 32.3071 5.5205 36.0469 c5.5205 39.7021 11.8838 39.7021 11.8838 43.356 c11.8838 47.0566 7.4609 47.0566 7.4609 50.7568 c7.4609 54.4043 5.7959 54.4043 5.7959 58.0542 c5.7959 61.7686 4.6631 61.7686 4.6631 65.4805 c4.6631 69.1636 11.9512 69.3184 11.9512 73 C27.9268 73 L27.9268 69.3184 22.0635 69.1636 22.0635 65.4805 c22.0635 61.7686 28.6631 61.7686 28.6631 58.0542 c28.6631 54.4043 25.1553 54.4043 25.1553 50.7568 c25.1553 47.0566 28.8145 47.0566 28.8145 43.356 c28.8145 39.7021 22.1191 39.7021 22.1191 36.0469 c22.1191 32.3071 26.3945 32.3071 26.3945 28.5654 c26.3945 24.832 24.4248 24.832 24.4248 21.0991 c24.4248 17.4858 20.3838 17.4858 20.3838 13.8735 c20.3838 10.2334 24.6055 10.2334 24.6055 6.5938 c24.6055 2.8813 27.9268 4.7129 27.9268 1 C11.9512 1 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.9216 0.2157 0.9451 0.0745 k 0.9216 0.2157 0.9451 0.0745 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.875 1 m41.875 4.7134 42.3867 2.8818 42.3867 6.5938 c42.3867 10.2334 40.5947 10.2334 40.5947 13.8735 c40.5947 17.4858 41.5742 17.4858 41.5742 21.0991 c41.5742 24.832 43.6484 24.832 43.6484 28.5659 c43.6484 32.3076 39.1709 32.3076 39.1709 36.0469 c39.1709 39.7026 39.7549 39.7026 39.7549 43.356 c39.7549 47.0566 45.3896 47.0566 45.3896 50.7568 c45.3896 54.4043 40.1055 54.4043 40.1055 58.0542 c40.1055 61.7686 40.6289 61.7686 40.6289 65.4805 c40.6289 69.1636 41.875 69.3184 41.875 73 C59.0752 73 L59.0752 69.4219 53.4805 70.1934 53.4805 66.6143 c53.4805 62.9136 55.8945 62.9136 55.8945 59.2153 c55.8945 55.502 61.0059 55.502 61.0059 51.7886 c61.0059 48.1489 60.5635 48.1489 60.5635 44.5103 c60.5635 40.897 59.9277 40.897 59.9277 37.2842 c59.9277 33.5508 56.3662 33.5508 56.3662 29.8169 c56.3662 26.0762 61.0908 26.0762 61.0908 22.3354 c61.0908 18.6812 52.6025 18.6812 52.6025 15.0264 c52.6025 11.3262 55.7461 11.3262 55.7461 7.6265 c55.7461 3.978 59.0752 4.6484 59.0752 1 C41.875 1 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Honeycomb)(Honeycomb) 12.9819 14.6548 65.8066 60.6758 [%AI3_Tile(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR64.0161 21.3906 m64.0161 7.9009 L52.3345 1.1543 L40.6475 7.9009 L40.6475 21.3906 L52.3345 28.1372 L64.0161 21.3906 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.9536 19.4839 m43.9536 9.8081 L52.3345 4.9702 L60.7153 9.8081 L60.7153 19.4839 L52.3345 24.3218 L43.9536 19.4839 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR37.479 21.394 m37.479 7.9014 L25.7944 1.1548 L14.1099 7.9014 L14.1099 21.3911 L25.7944 28.1406 L37.479 21.394 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR17.4126 19.4839 m17.4126 9.8081 L25.7944 4.9702 L34.1743 9.8081 L34.1743 19.4839 L25.7944 24.3218 L17.4126 19.4839 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR24.3691 44.0386 m24.3691 30.5459 L12.6846 23.7993 L1 30.5459 L1 44.0356 L12.6846 50.7852 L24.3691 44.0386 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR4.3027 42.1284 m4.3027 32.4526 L12.6846 27.6147 L21.0645 32.4526 L21.0645 42.1284 L12.6846 46.9663 L4.3027 42.1284 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR77.2871 44.3774 m77.2871 30.8843 L65.603 24.1382 L53.9185 30.8843 L53.9185 44.3765 L65.603 51.1226 L77.2871 44.3774 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.2202 42.4692 m57.2202 32.7915 L65.603 27.9536 L73.9819 32.7915 L73.9819 42.4692 L65.603 47.3081 L57.2202 42.4692 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR50.7471 44.3774 m50.7471 30.8843 L39.0649 24.1382 L27.3774 30.8843 L27.3774 44.3765 L39.0649 51.1235 L50.7471 44.3774 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR30.6821 42.4692 m30.6821 32.7915 L39.0649 27.9517 L47.4438 32.7915 L47.4438 42.4702 L39.0649 47.3091 L30.6821 42.4692 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR37.479 67.3599 m37.479 53.8682 L25.7944 47.1221 L14.1099 53.8682 L14.1099 67.3599 L25.7944 74.1074 L37.479 67.3599 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR17.4126 65.4526 m17.4126 55.7749 L25.7944 50.937 L34.1743 55.7749 L34.1772 65.4526 L25.7944 70.2905 L17.4126 65.4526 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR64.0161 67.3599 m64.0161 53.8682 L52.3345 47.1221 L40.6475 53.8682 L40.6475 67.3599 L52.3345 74.1074 L64.0161 67.3599 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.9536 65.4526 m43.9536 55.7749 L52.3345 50.937 L60.7153 55.7749 L60.7153 65.4526 L52.3345 70.2905 L43.9536 65.4526 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Jungle Stripes)(Jungle Stripes) 37 19 73 55 [%AI3_Tile(0 O 0 R 1 0 1 0 k 1 0 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 18 w 4 M []0 d0 XR37 37 m73 37 lS%AI6_EndPatternLayer) &(0 O 0 R 0.3451 0 0.6863 0 k 0.3451 0 0.6863 0 K) @(%AI6_BeginPatternLayer0 J 0 j 9 w 4 M []0 d0 XR37 37 m73 37 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Mediterranean Tiles)(Mediterranean Tiles) 4.9482 11.5332 39.291 45.8818 [%AI3_Tile(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR0.1499 40.748 m10.0083 40.749 L16.9673 33.79 L16.9702 23.9297 L10.0093 16.9697 L0.1509 16.9688 L0.1499 40.748 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR0.1499 40.748 m10.0083 40.749 L16.9673 33.79 L16.9702 23.9297 L10.0093 16.9697 L0.1509 16.9688 L0.1499 40.748 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9712 0.1504 m10.0122 7.1094 L10.0093 16.9697 L16.9702 23.9297 L26.8296 23.9307 L33.7915 16.9727 L33.7915 7.1123 L26.8335 0.1514 L16.9712 0.1504 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9712 0.1504 m10.0122 7.1094 L10.0093 16.9697 L16.9702 23.9297 L26.8296 23.9307 L33.7915 16.9727 L33.7915 7.1123 L26.8335 0.1514 L16.9712 0.1504 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9673 33.79 m10.0083 40.749 L10.0054 50.6084 L16.9663 57.5693 L26.8257 57.5703 L33.7876 50.6113 L33.7876 40.752 L26.8296 33.791 L16.9673 33.79 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9673 33.79 m10.0083 40.749 L10.0054 50.6084 L16.9663 57.5693 L26.8257 57.5703 L33.7876 50.6113 L33.7876 40.752 L26.8296 33.791 L16.9673 33.79 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR33.7915 16.9727 m26.8296 23.9307 L26.8296 33.791 L33.7876 40.752 L43.6475 40.7529 L50.6094 33.7939 L50.6094 23.9336 L43.6494 16.9736 L33.7915 16.9727 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR33.7915 16.9727 m26.8296 23.9307 L26.8296 33.791 L33.7876 40.752 L43.6475 40.7529 L50.6094 33.7939 L50.6094 23.9336 L43.6494 16.9736 L33.7915 16.9727 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.9725 0.9451 0 0 k 0.9725 0.9451 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.6514 7.1123 m43.6514 16.9727 L33.7915 16.9727 L33.7915 7.1123 L43.6514 7.1123 Lf26.8296 23.9307 m26.8296 33.791 L16.9702 33.791 L16.9702 23.9307 L26.8296 23.9307 Lf10.0093 7.1094 m10.0093 16.9697 L0.1538 16.9697 L0.1538 7.1094 L10.0093 7.1094 Lf43.6494 40.752 m43.6494 50.6113 L33.7876 50.6113 L33.7876 40.752 L43.6494 40.752 Lf10.0083 40.749 m10.0083 50.6084 L0.1499 50.6084 L0.1499 40.749 L10.0083 40.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Pyramids)(Pyramids) 1 1 19.5 19.5 [%AI3_Tile(0 O 0 R 0.1882 0.1294 0.102 0.0118 k 0.1882 0.1294 0.102 0.0118 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 19.5 m10.25 10.25 l19.5 19.5 l1 19.5 lf%AI6_EndPatternLayer) &(0 O 0 R 0.6235 0.4863 0.4863 0.4784 k 0.6235 0.4863 0.4863 0.4784 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR19.5 1 m10.25 10.25 l1 1 l19.5 1 lf%AI6_EndPatternLayer) &(0 O 0 R 0.3529 0.2549 0.2235 0.0667 k 0.3529 0.2549 0.2235 0.0667 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 1 m10.25 10.25 l1 19.5 l1 1 lf%AI6_EndPatternLayer) &(0 O 0 R 0.4902 0.3647 0.3451 0.2196 k 0.4902 0.3647 0.3451 0.2196 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR19.5 19.5 m10.25 10.25 l19.5 1 l19.5 19.5 lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc1 1 1 1 kPc0 0 0 0 kPc0 0 0 1 kPc0 0 0 0.8 kPc0 0 0 0.6 kPc0 0 0 0.4 kPc0 0 0 0.2 kPc0 1 1 0 kPc0 0.75 0.75 0 kPc0 0.5 0.5 0 kPc0 0.25 0.25 0 kPc0.8 0 1 0 kPc0.6 0 0.75 0 kPc0.4 0 0.5 0 kPc0.2 0 0.25 0 kPc1 0.5 0 0 kPc0.75 0.375 0 0 kPc0.5 0.25 0 0 kPc0.25 0.125 0 0 kPc0 0.5 1 0 kPc0 0.375 0.75 0 kPc0 0.25 0.5 0 kPc0 0.125 0.25 0 kPc0.5 0.9 0 0 kPc0.375 0.675 0 0 kPc0.25 0.45 0 0 kPc0.125 0.225 0 0 kPc0.8 0 0 0 kPc0.6 0 0 0 kPc0.4 0 0 0 kPc0.2 0 0 0 kPc0 0 1 0 kPc0 0 0.75 0 kPc0 0 0.5 0 kPc0 0 0.25 0 kPcBb2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPcBb0 0 0 0 Bh2 (Black, White Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPcBb2 (Copper) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPcBb2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPcBb0 0 0 0 Bh2 (Violet Eye) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPcBb2 (Tropical Sunset) 0 0 0 1 1 0 0 1 0 0 Bg0 BBPc(Mediterranean Tiles) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Pyramids) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Honeycomb) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Jungle Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Azure Rings) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Camouflage) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Auu*u1 D0 O0.89 0 0.05 0 k0 R0 0 0 1 K0 J 0 j 1 w 4 M []0 d0 XR427.5352 352.1914 m426.2666 352.2764 424.9922 352.334 423.7021 352.334 c417.5664 352.334 411.6621 351.3535 406.124 349.5596 C406.582 348.3105 406.8447 346.9678 406.8447 345.5596 c406.8447 339.1309 401.6338 333.9199 395.2051 333.9199 c391.5605 333.9199 388.3105 335.5977 386.1758 338.2197 C382.8623 335.3174 379.8906 332.04 377.3232 328.4492 C427.5352 328.4492 L427.5352 352.1914 Lb451.2461 345.2393 m451.2461 328.4492 L470.0811 328.4492 L465.1436 335.3525 458.7109 341.1104 451.2461 345.2393 Cb473.5439 322.9883 m451.2461 322.9883 L451.2461 276.4316 L450.0947 264.9355 462.7412 264.9355 V471.9102 264.9355 L477.4707 273.7363 480.7021 284.1553 480.7021 295.334 c480.7021 305.3711 478.0986 314.7969 473.5439 322.9883 Cb427.5352 276.4316 m427.5352 299.709 427.5352 311.3486 v427.5352 322.9883 415.8965 322.9883 Y408.1377 322.9883 L408.1377 276.4316 L408.1377 264.792 419.7764 264.792 Y419.7764 257.1055 L381.4258 257.1055 L391.8555 245.5781 406.9326 238.334 423.7021 238.334 c440.4717 238.334 455.5479 245.5781 465.9775 257.1055 C462.7412 257.1055 L427.5352 255.0791 427.5352 276.4316 Vb384.8594 311.3486 m384.8594 321.3652 376.2451 322.7607 373.8418 322.9551 C369.2979 314.7715 366.7021 305.3584 366.7021 295.334 c366.7021 284.1641 369.9277 273.7539 375.4795 264.958 C384.8535 266.3613 384.8594 276.4316 Y384.8594 299.709 384.8594 311.3486 vb*UUu*u3 w427.5352 352.1914 m426.2666 352.2764 424.9922 352.334 423.7021 352.334 c417.5664 352.334 411.6621 351.3535 406.124 349.5596 C406.582 348.3105 406.8447 346.9678 406.8447 345.5596 c406.8447 339.1309 401.6338 333.9199 395.2051 333.9199 c391.5605 333.9199 388.3105 335.5977 386.1758 338.2197 C382.8623 335.3174 379.8906 332.04 377.3232 328.4492 C427.5352 328.4492 L427.5352 352.1914 Lb451.2461 345.2393 m451.2461 328.4492 L470.0811 328.4492 L465.1436 335.3525 458.7109 341.1104 451.2461 345.2393 Cb473.5439 322.9883 m451.2461 322.9883 L451.2461 276.4316 L450.0947 264.9355 462.7412 264.9355 V471.9102 264.9355 L477.4707 273.7363 480.7021 284.1553 480.7021 295.334 c480.7021 305.3711 478.0986 314.7969 473.5439 322.9883 Cb427.5352 276.4316 m427.5352 299.709 427.5352 311.3486 v427.5352 322.9883 415.8965 322.9883 Y408.1377 322.9883 L408.1377 276.4316 L408.1377 264.792 419.7764 264.792 Y419.7764 257.1055 L381.4258 257.1055 L391.8555 245.5781 406.9326 238.334 423.7021 238.334 c440.4717 238.334 455.5479 245.5781 465.9775 257.1055 C462.7412 257.1055 L427.5352 255.0791 427.5352 276.4316 Vb384.8594 311.3486 m384.8594 321.3652 376.2451 322.7607 373.8418 322.9551 C369.2979 314.7715 366.7021 305.3584 366.7021 295.334 c366.7021 284.1641 369.9277 273.7539 375.4795 264.958 C384.8535 266.3613 384.8594 276.4316 Y384.8594 299.709 384.8594 311.3486 vb*UUUu*u0 D0 0 0 1 k1 w356.8662 289.9697 m357.9214 290.0957 L358.1387 288.2646 L363.166 288.8613 L363.3169 287.5889 L358.29 286.9922 L358.5073 285.1611 L357.4521 285.0361 l356.8662 289.9697 Lf*U*u357.7524 296.1123 m357.8262 292.957 L359.1226 292.9873 L359.0552 295.877 L360.1172 295.9014 L360.1846 293.0117 L361.7622 293.0488 L361.6851 296.3604 L362.7783 296.3857 L362.8853 291.8242 L356.7617 291.6816 L356.6592 296.0869 l357.7524 296.1123 Lf*U*u356.7153 298.3125 m356.8145 299.5586 L359.3335 299.3579 L357.0024 301.9204 L357.1333 303.5654 L359.4453 300.8604 L363.249 303.208 L363.1187 301.5713 L360.3018 299.9014 L360.8779 299.2354 L362.9199 299.0728 L362.8208 297.8267 l356.7153 298.3125 Lf*U*u357.3999 305.3813 m357.647 306.6919 L362.2593 308.2495 L358.0889 309.0356 L358.3091 310.2021 L364.3276 309.0679 L364.0923 307.8169 L359.3936 306.2139 L363.6387 305.4136 L363.4189 304.2466 l357.3999 305.3813 Lf*U*u365.5425 315.2656 m365.8623 314.6851 365.8936 313.9771 365.6377 313.1416 c365.3818 312.3066 364.959 311.7378 364.3691 311.436 c363.6299 311.0146 362.7358 310.9648 361.6865 311.2866 c360.6157 311.6147 359.9033 312.1567 359.5479 312.9131 c359.2285 313.4937 359.1973 314.2017 359.4531 315.0371 c359.709 315.8721 360.1318 316.4409 360.7217 316.7432 c361.439 317.168 362.3325 317.2168 363.4033 316.8887 c364.4526 316.5669 365.1655 316.0259 365.5425 315.2656 cf1 D364.4121 314.7754 m364.144 315.167 363.6826 315.4629 363.0278 315.6636 c362.376 315.8633 361.8281 315.8765 361.3853 315.7026 c360.9424 315.5293 360.6475 315.2017 360.5 314.7207 c360.3525 314.2393 360.4126 313.8008 360.6792 313.4053 c360.9463 313.0103 361.4072 312.7119 362.062 312.5112 c362.7163 312.311 363.2651 312.2993 363.708 312.4775 c364.1504 312.6553 364.4458 312.9849 364.5933 313.4663 c364.7407 313.9473 364.6802 314.3838 364.4121 314.7754 cf*U*u0 D361.2061 319.5933 m361.7056 320.7734 L366.3384 318.8115 L367.5205 321.6025 L368.5278 321.1763 L366.8462 317.2051 l361.2061 319.5933 Lf*U*u370.8369 326.6914 m371.0308 326.0576 370.9175 325.3584 370.4961 324.5928 c370.0752 323.8276 369.5454 323.3569 368.9063 323.1821 c368.0967 322.9204 367.2114 323.0542 366.2495 323.583 c365.2686 324.123 364.6816 324.7988 364.4883 325.6123 c364.2939 326.2456 364.4077 326.9453 364.8286 327.7104 c365.2495 328.4761 365.7798 328.9463 366.4189 329.1221 c367.2075 329.3916 368.0923 329.2563 369.0732 328.7168 c370.0352 328.188 370.623 327.5127 370.8369 326.6914 cf1 D369.6299 326.4424 m369.4473 326.8804 369.0562 327.2642 368.4561 327.5942 c367.8584 327.9229 367.3252 328.0474 366.8564 327.9683 c366.3872 327.8882 366.0317 327.6284 365.7891 327.187 c365.5464 326.7461 365.5156 326.3047 365.6963 325.8633 c365.877 325.4214 366.2671 325.0356 366.8672 324.7056 c367.4668 324.376 368.002 324.2524 368.4717 324.3364 c368.9414 324.4204 369.2974 324.6826 369.54 325.1235 c369.7827 325.5649 369.8125 326.0044 369.6299 326.4424 cf*U*u0 D371.4678 334.1802 m371.0703 334.3433 370.6948 334.3198 370.3418 334.1094 c370.146 333.9907 369.9736 333.8271 369.8252 333.6177 c369.5415 333.2163 369.459 332.7798 369.5786 332.3081 c369.6978 331.8359 370.061 331.3857 370.6675 330.9561 c371.2783 330.5234 371.8096 330.3569 372.2612 330.4565 c372.7129 330.5562 373.0645 330.7842 373.3169 331.1401 c373.564 331.4893 373.667 331.8457 373.625 332.2104 c373.5835 332.5747 373.4194 332.8975 373.1323 333.1782 c372.3086 332.0146 L371.48 332.6016 L372.9517 334.6802 L375.6294 332.7842 L375.1416 332.0957 L374.4492 332.4424 L374.5435 332.0737 374.5815 331.7754 374.5649 331.5469 c374.5381 331.1519 374.3828 330.7534 374.0986 330.3516 c373.6299 329.6895 373.0176 329.3096 372.2612 329.2109 c371.4897 329.0962 370.7056 329.3208 369.9082 329.8857 c369.1016 330.4565 368.6118 331.1367 368.4399 331.9253 c368.2681 332.7139 368.4404 333.4731 368.958 334.2041 c369.4063 334.8374 369.9272 335.2324 370.5205 335.3896 c371.1138 335.5469 371.6704 335.4834 372.1899 335.2002 c371.4678 334.1802 Lf*U*u375.8843 336.021 m376.1187 335.8657 376.3252 335.7852 376.5039 335.7798 c376.8296 335.77 377.1602 335.9546 377.4956 336.334 c377.6963 336.561 377.8345 336.7676 377.9102 336.9531 c378.0532 337.3057 377.9956 337.5957 377.7378 337.8237 c377.5869 337.9565 377.4121 337.9937 377.2129 337.9346 c377.0156 337.8735 376.7598 337.7271 376.4448 337.4951 c375.9043 337.1016 L375.3726 336.7153 374.9614 336.4854 374.6709 336.4111 c374.1821 336.2827 373.7139 336.417 373.2651 336.8135 c372.856 337.1748 372.6494 337.6265 372.645 338.167 c372.6406 338.708 372.8965 339.27 373.4131 339.8545 c373.8438 340.3423 374.3398 340.645 374.8999 340.7632 c375.4604 340.8813 375.9917 340.7339 376.4937 340.3203 c375.6763 339.3955 L375.3857 339.6221 375.082 339.6729 374.7651 339.5479 c374.5542 339.4639 374.3491 339.3096 374.1499 339.0845 c373.9287 338.8335 373.8018 338.5898 373.7686 338.3525 c373.7358 338.1152 373.8086 337.918 373.9863 337.7612 c374.1499 337.6167 374.3369 337.5825 374.5479 337.6587 c374.6851 337.7061 374.9263 337.8516 375.2705 338.0962 c376.1646 338.728 L376.5562 339.0049 376.8989 339.1704 377.1929 339.2236 c377.6489 339.3062 378.0806 339.168 378.4878 338.8076 c378.9058 338.4385 379.1104 337.9707 379.1016 337.4048 c379.0928 336.8384 378.8286 336.2617 378.3091 335.6738 c377.7778 335.0728 377.2241 334.7212 376.6475 334.6182 c376.0708 334.5151 375.5439 334.6743 375.0669 335.0962 c375.8843 336.021 Lf*U*u380.5752 345.2427 m378.2607 343.0972 L379.1421 342.146 L381.2622 344.1113 L381.9844 343.332 L379.8647 341.3667 L380.9375 340.2095 L383.3667 342.4614 L384.1104 341.6592 L380.7642 338.5576 L376.6006 343.0493 L379.8315 346.0449 l380.5752 345.2427 Lf*U*u381.5396 347.4805 m382.5391 348.231 L384.0566 346.2104 L384.4341 349.6538 L385.7534 350.6445 L385.2563 347.1211 L389.5342 345.8242 L388.2212 344.8384 L385.1045 345.8442 L384.9868 344.9717 L386.2168 343.3335 L385.2173 342.583 l381.5396 347.4805 Lf*U*u391.0933 353.9302 m391.6436 353.0215 L390.0664 352.0659 L392.6895 347.7363 L391.5938 347.0723 L388.9707 351.4023 L387.394 350.4468 L386.8433 351.3555 l391.0933 353.9302 Lf*U*u396.4072 349.7598 m395.2676 349.1748 L392.4702 354.6235 L393.6104 355.2085 l396.4072 349.7598 Lf*U*u401.9487 352.8242 m401.7051 352.208 401.1797 351.7319 400.3735 351.3965 c399.5669 351.061 398.8589 351.0239 398.2505 351.2856 c397.4546 351.5859 396.8457 352.2432 396.4243 353.2563 c395.9941 354.29 395.957 355.1846 396.313 355.9409 c396.5566 356.5571 397.0815 357.0332 397.8882 357.3687 c398.6948 357.7041 399.4023 357.7412 400.0112 357.48 c400.7959 357.1982 401.4033 356.541 401.8335 355.5073 c402.2554 354.4941 402.2935 353.5996 401.9487 352.8242 cf1 D400.8496 353.3823 m400.98 353.8384 400.9141 354.3828 400.6509 355.0151 c400.3887 355.6445 400.0498 356.0747 399.6338 356.3052 c399.2173 356.5352 398.7769 356.5537 398.312 356.3604 c397.8472 356.167 397.5479 355.8413 397.4136 355.3833 c397.2798 354.9258 397.3442 354.3804 397.6069 353.7485 c397.8701 353.1162 398.2114 352.6865 398.6309 352.459 c399.0503 352.2314 399.4922 352.2144 399.957 352.4077 c400.4219 352.6016 400.7192 352.9263 400.8496 353.3823 cf*U*u0 D402.5396 358.9512 m403.8198 359.3257 L407.3003 355.9229 L406.1089 359.9956 L407.2485 360.3291 L408.9683 354.4507 L407.7466 354.0933 L404.186 357.5527 L405.3994 353.4063 L404.2598 353.0728 l402.5396 358.9512 Lf*U*u413.9761 360.5586 m410.8726 359.9854 L411.1079 358.71 L413.9507 359.2349 L414.1436 358.1899 L411.3008 357.6655 L411.5874 356.1133 L414.8447 356.7148 L415.0435 355.6392 L410.5566 354.811 L409.4448 360.834 L413.7778 361.6338 l413.9761 360.5586 Lf*U*u415.9502 361.9287 m417.2798 362.0361 L419.998 357.9976 L419.6572 362.2275 L420.8408 362.3228 L421.3325 356.2178 L420.064 356.1157 L417.2788 360.2251 L417.626 355.9189 L416.4424 355.8237 l415.9502 361.9287 Lf*U*u426.9961 356.1343 m425.7158 356.189 L425.9775 362.3081 L427.2578 362.2534 l426.9961 356.1343 Lf*U*u429.3105 362.1548 m430.6348 361.9956 L432.498 357.4985 L433.0029 361.7119 L434.1816 361.5708 L433.4531 355.4893 L432.1895 355.6406 L430.2744 360.2212 L429.7607 355.9321 L428.582 356.0732 l429.3105 362.1548 Lf*U*u436.3369 361.1611 m440.5771 360.2188 L440.3467 359.1816 L437.3574 359.8462 L437.0488 358.458 L439.6719 357.875 L439.4414 356.8379 L436.8184 357.4209 L436.2617 354.9194 L435.0107 355.1978 l436.3369 361.1611 Lf*U*u445.0596 352.9824 m444.4707 352.6777 443.7627 352.6641 442.9336 352.9404 c442.1055 353.2168 441.5469 353.6538 441.2607 354.251 c440.8574 355.0005 440.8301 355.8955 441.1777 356.9365 c441.5322 357.9985 442.0918 358.6978 442.8564 359.0337 c443.4453 359.3389 444.1533 359.3525 444.9824 359.0762 c445.8105 358.7998 446.3691 358.3628 446.6563 357.7656 c447.0635 357.0381 447.0898 356.1431 446.7354 355.0811 c446.3877 354.04 445.8291 353.3408 445.0596 352.9824 cf1 D444.5977 354.125 m444.9951 354.3833 445.3027 354.8374 445.5195 355.4868 c445.7354 356.1338 445.7627 356.6807 445.5996 357.1279 c445.4375 357.5747 445.1172 357.8779 444.6396 358.0376 c444.1621 358.1968 443.7227 358.1479 443.3203 357.8906 c442.9189 357.6338 442.6094 357.1802 442.3926 356.5308 c442.1758 355.8813 442.1514 355.333 442.3174 354.8862 c442.4844 354.439 442.8066 354.1357 443.2842 353.9766 c443.7617 353.8174 444.1992 353.8667 444.5977 354.125 cf*U*u0 D453.0303 355.4219 m453.1943 355.2397 453.3076 355.0298 453.3711 354.7935 c453.4238 354.5986 453.4453 354.3999 453.4355 354.1973 c453.4248 353.9951 453.3691 353.7847 453.2686 353.5659 c453.1465 353.3022 452.96 353.0742 452.71 352.8809 c452.459 352.6875 452.1563 352.6089 451.8008 352.645 c452.0088 352.4233 452.1221 352.1934 452.1406 351.9536 c452.1592 351.7144 452.0781 351.3994 451.8984 351.0088 c451.7246 350.6348 L451.6074 350.3804 451.5381 350.2031 451.5156 350.103 c451.4795 349.9453 451.501 349.8071 451.5801 349.688 c451.5156 349.5483 L450.2412 350.1367 L450.2637 350.2764 450.2852 350.3872 450.3047 350.4697 c450.3477 350.6396 450.4053 350.8071 450.4785 350.9722 c450.71 351.4932 L450.8691 351.8506 450.918 352.1157 450.8545 352.2891 c450.791 352.4619 450.5967 352.6235 450.2725 352.7729 c449.1348 353.2988 L448.126 351.1143 L446.9912 351.6387 L449.5596 357.1987 L452.2188 355.9702 l452.5957 355.7871 452.8662 355.6045 453.0303 355.4219 cf1 D450.249 355.71 m449.5605 354.2207 L450.8125 353.6426 L451.0615 353.5273 451.2617 353.4712 451.4141 353.4741 c451.6826 353.4775 451.8887 353.6348 452.0322 353.9458 c452.1875 354.2817 452.1855 354.5566 452.0264 354.7705 c451.9365 354.8911 451.7725 355.0063 451.5332 355.1167 c450.249 355.71 Lf*U*u0 D459.4688 352 m461.0361 351.0474 L457.8574 345.8125 L456.8428 346.4287 L458.9932 349.9697 L459.0547 350.0713 459.1426 350.2134 459.2559 350.3955 c459.3701 350.5776 459.457 350.7183 459.5176 350.8179 c455.8604 347.0254 L454.7998 347.6694 L456.4854 352.6592 L456.4248 352.5596 456.3398 352.4175 456.2305 352.2324 c456.1221 352.0474 456.0361 351.9043 455.9746 351.8022 c453.8242 348.2617 L452.8096 348.8779 L455.9883 354.1128 L457.5742 353.1499 L456.0254 348.4565 l459.4688 352 Lf*U*u464.2148 348.7056 m465.3682 347.8135 L463.3271 341.6489 L462.2324 342.4956 L462.6816 343.7285 L460.8984 345.1079 L459.8086 344.3706 L458.7422 345.1958 l464.2148 348.7056 Lf1 D461.8252 345.7339 m463.0625 344.7769 L463.9287 347.1563 l461.8252 345.7339 Lf*U*u0 D471.209 342.6636 m470.4854 341.8853 L469.1348 343.1401 L465.6895 339.4316 L464.75 340.3037 L468.1963 344.0122 L466.8457 345.2676 L467.5693 346.0459 l471.209 342.6636 Lf*U*u468.6465 336.4194 m467.7715 337.3555 L472.2461 341.5376 L473.1211 340.6016 l468.6465 336.4194 Lf*U*u473.1631 331.853 m472.5029 331.9199 471.9023 332.2964 471.3604 332.9814 c470.8184 333.666 470.5908 334.3374 470.6768 334.9941 c470.75 335.8418 471.2168 336.606 472.0781 337.2871 c472.9561 337.9819 473.8066 338.2603 474.6309 338.123 c475.29 338.0562 475.8916 337.6802 476.4336 336.9951 c476.9756 336.3101 477.2031 335.6392 477.1172 334.9819 c477.0596 334.1504 476.5918 333.3872 475.7139 332.6924 c474.8525 332.0112 474.0029 331.7314 473.1631 331.853 cf1 D473.4014 333.062 m473.876 333.0605 474.3818 333.272 474.9189 333.6973 c475.4531 334.1201 475.7754 334.5635 475.8838 335.0264 c475.9922 335.4897 475.8906 335.9185 475.5781 336.313 c475.2656 336.708 474.8711 336.9077 474.3936 336.9126 c473.917 336.9175 473.4102 336.707 472.873 336.2822 c472.3359 335.8574 472.0146 335.4121 471.9102 334.9468 c471.8047 334.4814 471.9082 334.0513 472.2207 333.6567 c472.5332 333.2617 472.9268 333.064 473.4014 333.062 cf*U*u0 D479.2227 332.9419 m479.9287 331.811 L477.5947 327.5396 L481.1934 329.7886 L481.8223 328.7813 L476.6279 325.5356 L475.9541 326.6147 L478.3213 330.9785 L474.6572 328.689 L474.0283 329.6958 l479.2227 332.9419 Lf*U*u479.4941 324.1353 m479.2607 323.9775 479.1074 323.8174 479.0342 323.6543 c478.9014 323.3569 478.9453 322.981 479.1689 322.5264 c479.3018 322.2539 479.4404 322.0474 479.583 321.9067 c479.8535 321.6406 480.1445 321.583 480.4531 321.7344 c480.6338 321.8228 480.7344 321.9702 480.7559 322.1772 c480.7744 322.3828 480.7373 322.6753 480.6426 323.0547 c480.4854 323.7046 L480.3311 324.3433 480.2754 324.811 480.3174 325.1079 c480.3848 325.6084 480.6875 325.9902 481.2256 326.2539 c481.7158 326.4941 482.2119 326.5132 482.7129 326.311 c483.2148 326.1089 483.6367 325.6577 483.9805 324.9575 c484.2666 324.373 484.3574 323.7993 484.2529 323.2358 c484.1484 322.6729 483.8096 322.2383 483.2354 321.9321 c482.6924 323.0405 L483.0127 323.2222 483.1758 323.4839 483.1816 323.8247 c483.1836 324.0513 483.1191 324.2998 482.9873 324.5698 c482.8398 324.8701 482.6631 325.0806 482.4561 325.2012 c482.249 325.3223 482.0391 325.3306 481.8262 325.2261 c481.6309 325.1299 481.5273 324.9697 481.5176 324.7461 c481.5088 324.6006 481.5518 324.3223 481.6465 323.9111 c481.8896 322.8438 L481.9961 322.376 482.0186 321.9961 481.9551 321.7041 c481.8574 321.251 481.5654 320.9043 481.0771 320.665 c480.5762 320.4199 480.0654 320.4092 479.5459 320.6333 c479.0254 320.8569 478.5928 321.3218 478.248 322.0264 c477.8955 322.7461 477.7813 323.3921 477.9063 323.9644 c478.0303 324.5371 478.3789 324.9634 478.9502 325.2437 c479.4941 324.1353 Lf*U*u487.2637 316.6733 m486.2695 316.2983 L485.6182 318.0234 L480.8818 316.2363 L480.4297 317.4351 L485.166 319.2222 L484.5156 320.9473 L485.5098 321.3223 l487.2637 316.6733 Lf*U*u487.8799 310.4985 m487.0498 313.5435 L485.7988 313.2026 L486.5586 310.4136 L485.5332 310.1343 L484.7734 312.9229 L483.251 312.5078 L484.1221 309.312 L483.0664 309.0244 L481.8672 313.4263 L487.7764 315.0371 L488.9346 310.7861 l487.8799 310.4985 Lf*U*u489.416 308.6147 m489.6201 307.3813 L487.127 306.9688 L490.0078 305.0435 L490.2773 303.416 L487.3809 305.4839 L484.2549 302.2886 L483.9873 303.9082 L486.3184 306.2085 L485.5986 306.7158 L483.5781 306.3813 L483.374 307.6143 l489.416 308.6147 Lf*U*u490.4561 301.5933 m490.5332 300.2622 L486.4355 297.6348 L490.6719 297.8809 L490.7412 296.6958 L484.627 296.3398 L484.5527 297.6104 L488.7236 300.3032 L484.4102 300.0522 L484.3418 301.2378 l490.4561 301.5933 Lf*U*u484.5625 293.5488 m484.5859 294.8301 L490.71 294.7197 L490.6865 293.4385 l484.5625 293.5488 Lf*U*u490.6367 291.3525 m490.5186 290.1084 L488.0029 290.3467 L490.2959 287.749 L490.1396 286.1064 L487.8691 288.8457 L484.0303 286.5557 L484.1846 288.1904 L487.0264 289.8174 L486.4609 290.4922 L484.4209 290.6855 L484.5391 291.9297 l490.6367 291.3525 Lf*UU1 Ap0 R0 0 0 1 K3 w494.9102 295.334 m494.9102 256.0078 463.0283 224.126 423.7012 224.126 c384.375 224.126 352.4932 256.0078 352.4932 295.334 c352.4932 334.6611 384.375 366.543 423.7012 366.543 c463.0283 366.543 494.9102 334.6611 494.9102 295.334 cs1 w362.1045 355.9463 m483.1982 355.9463 L483.1982 234.8525 L362.1045 234.8525 L362.1045 355.9463 Lnu*u0 Ap0 O0 0 0 1 k362.5757 278.6943 m362.4541 278.4844 362.2656 278.3457 362.0093 278.2783 c361.7534 278.2119 361.5195 278.2393 361.3076 278.3623 c361.0957 278.4844 360.9565 278.6738 360.8896 278.9297 c360.8223 279.1855 360.8506 279.4189 360.9751 279.6299 c361.0996 279.8408 361.29 279.9795 361.5459 280.0469 c361.8018 280.1143 362.0342 280.0859 362.2432 279.9629 c362.4521 279.8389 362.5908 279.6494 362.6577 279.3936 c362.7251 279.1377 362.6973 278.9043 362.5757 278.6943 cf*U*u365.877 274.1328 m366.5264 273.8633 366.9922 273.375 367.2749 272.6699 c367.6523 271.7266 367.6152 270.9102 367.1626 270.2227 c366.9063 269.8408 366.6045 269.5693 366.2573 269.4102 c365.7813 270.5996 L366.0229 270.7832 366.1899 270.9619 366.2817 271.1348 c366.4443 271.4443 366.4429 271.8047 366.2778 272.2178 c366.1094 272.6377 365.8027 272.9004 365.3579 273.0039 c364.9131 273.1074 364.373 273.0313 363.7368 272.7764 c363.1006 272.5225 362.6748 272.2041 362.4604 271.8223 c362.2456 271.4404 362.2168 271.0527 362.374 270.6602 c362.5356 270.2568 362.7954 270.0049 363.1538 269.9023 c363.3481 269.8447 363.6074 269.8359 363.9331 269.877 c364.4092 268.6875 L363.7505 268.541 363.144 268.5996 362.5898 268.8613 c362.0356 269.124 361.6279 269.5811 361.3672 270.2324 c361.0444 271.0391 361.0518 271.7773 361.3901 272.4482 c361.731 273.1201 362.3589 273.6387 363.2739 274.0059 c364.2637 274.4014 365.1309 274.4443 365.877 274.1328 cf*U*u363.2993 266.1328 m368.7173 268.9902 L369.3145 267.8564 L367.2554 266.7705 L368.3481 264.6973 L370.4077 265.7832 L371.0054 264.6504 L365.5874 261.7939 L364.9897 262.9268 L367.4087 264.2021 L366.3154 266.2754 L363.897 265 l363.2993 266.1328 Lf*U*u372.7515 261.9072 m373.563 260.6963 L369.6748 255.4951 L368.9043 256.6455 L369.7207 257.6729 L368.4663 259.5449 L367.1987 259.1914 L366.4487 260.3115 l372.7515 261.9072 Lf1 D369.5439 259.8457 m370.4146 258.5459 L371.9897 260.5283 l369.5439 259.8457 Lf*U*u0 D375.4399 258.0723 m376.2534 257.083 L372.3672 253.8877 L374.2925 251.5459 L373.4478 250.8516 L370.709 254.1826 l375.4399 258.0723 Lf*U*u381.8433 251.0127 m383.1509 249.7256 L378.856 245.3594 L378.0093 246.1924 L380.9146 249.1455 L380.998 249.2305 381.1157 249.3486 381.2686 249.499 c381.4209 249.6504 381.5381 249.7676 381.6196 249.8506 c377.1899 246.998 L376.3052 247.8682 L379.0908 252.3389 L379.0088 252.2559 378.8936 252.1367 378.7451 251.9814 c378.5967 251.8262 378.4805 251.707 378.397 251.6221 c375.4917 248.6689 L374.6455 249.501 L378.9404 253.8672 L380.2632 252.5664 L377.6787 248.3535 l381.8433 251.0127 Lf*U*u387.0791 245.1865 m384.6025 247.1426 L383.7983 246.125 L386.0669 244.333 L385.4082 243.499 L383.1401 245.291 L382.1616 244.0527 L384.7607 242 L384.083 241.1416 L380.5029 243.9697 L384.2998 248.7754 L387.7568 246.0439 l387.0791 245.1865 Lf*U*u392.2046 242.916 m392.3423 242.7129 392.4268 242.4902 392.4575 242.2471 c392.4834 242.0469 392.4775 241.8467 392.4399 241.6484 c392.4023 241.4492 392.3188 241.248 392.189 241.0449 c392.0327 240.7998 391.8169 240.5996 391.5425 240.4414 c391.2676 240.2842 390.957 240.2471 390.6104 240.3311 c390.7861 240.084 390.8672 239.8398 390.853 239.6006 c390.8389 239.3613 390.7163 239.0596 390.4844 238.6973 c390.2627 238.3496 L390.1113 238.1143 390.0186 237.9473 389.9834 237.8516 c389.9263 237.7002 389.9282 237.5605 389.9907 237.4316 c389.9077 237.3018 L388.7251 238.0576 L388.7661 238.1934 388.8022 238.2998 388.8335 238.3789 c388.8984 238.542 388.978 238.7002 389.0732 238.8535 c389.3735 239.3379 L389.5796 239.6709 389.6631 239.9268 389.624 240.1064 c389.5845 240.2871 389.4146 240.4736 389.1133 240.666 c388.0576 241.3408 L386.7612 239.3135 L385.7085 239.9863 L389.0068 245.1475 L391.4751 243.5693 l391.8237 243.3369 392.0664 243.1191 392.2046 242.916 cf1 D389.4878 243.5791 m388.6045 242.1963 L389.7666 241.4531 L389.9971 241.3057 390.188 241.2227 390.3394 241.2051 c390.606 241.1729 390.8315 241.2998 391.0161 241.5889 c391.2153 241.9004 391.2505 242.1729 391.1216 242.4063 c391.0488 242.5381 390.9019 242.6748 390.6802 242.8164 c389.4878 243.5791 Lf*U*u0 D393.3599 237.5811 m393.2686 237.3154 393.2427 237.0957 393.2822 236.9209 c393.355 236.6025 393.6167 236.3301 394.0684 236.1006 c394.3389 235.9639 394.5732 235.8818 394.772 235.8555 c395.1489 235.8057 395.4155 235.9346 395.5713 236.2412 c395.6621 236.4209 395.6538 236.5986 395.5464 236.7773 c395.4375 236.9531 395.231 237.1631 394.9277 237.4102 c394.4106 237.834 L393.9033 238.251 393.5767 238.5908 393.4321 238.8535 c393.1851 239.2939 393.1968 239.7813 393.4673 240.3154 c393.7144 240.8027 394.0991 241.1162 394.6216 241.2568 c395.1436 241.3965 395.7524 241.291 396.4478 240.9375 c397.0283 240.6436 397.4463 240.2402 397.7017 239.7275 c397.957 239.2148 397.9478 238.6631 397.6738 238.0742 c396.5732 238.6318 L396.7192 238.9697 396.6924 239.2773 396.4917 239.5527 c396.3574 239.7354 396.1563 239.8945 395.8882 240.0303 c395.5898 240.1816 395.3218 240.2432 395.084 240.2158 c394.8457 240.1875 394.6733 240.0674 394.5659 239.8564 c394.4673 239.6611 394.4814 239.4717 394.6084 239.2871 c394.689 239.166 394.8906 238.9697 395.2139 238.6973 c396.0503 237.9912 L396.417 237.6826 396.6631 237.3916 396.7891 237.1211 c396.9839 236.7002 396.9585 236.248 396.7124 235.7627 c396.4604 235.2656 396.0591 234.9502 395.5088 234.8154 c394.959 234.6816 394.334 234.792 393.6343 235.1475 c392.9189 235.5098 392.439 235.957 392.1943 236.4893 c391.9497 237.0215 391.9712 237.5713 392.2588 238.1396 c393.3599 237.5811 Lf*U*u406.5923 236.668 m406.248 235.6631 L404.5039 236.2607 L402.8618 231.4727 L401.6499 231.8877 L403.292 236.6768 L401.5479 237.2744 L401.8926 238.2793 l406.5923 236.668 Lf*U*u411.6523 234.292 m408.5835 235.0303 L408.2803 233.7695 L411.0908 233.0938 L410.8423 232.0605 L408.0317 232.7363 L407.6626 231.2021 L410.8833 230.4277 L410.6274 229.3643 L406.1914 230.4316 L407.624 236.3857 L411.9082 235.3555 l411.6523 234.292 Lf*U*u413.4106 235.0674 m414.6489 234.8994 L414.3105 232.3955 L416.9976 234.582 L418.6323 234.3604 L415.8042 232.2012 L417.939 228.2744 L416.312 228.4941 L414.7993 231.3984 L414.1025 230.8604 L413.8281 228.8301 L412.5894 228.998 l413.4106 235.0674 Lf*U*u419.7422 234.2939 m421.0752 234.2549 L423.334 229.9434 L423.459 234.1846 L424.6465 234.1494 L424.4658 228.0273 L423.1934 228.0645 L420.876 232.4551 L420.7485 228.1367 L419.5615 228.1719 l419.7422 234.2939 Lf*U*u427.665 228.1689 m426.3848 228.1113 L426.1074 234.2295 L427.3867 234.2881 l427.665 228.1689 Lf*U*u430.3535 230.2607 m430.4238 229.9883 430.5244 229.791 430.6533 229.668 c430.8896 229.4424 431.2588 229.3594 431.7617 229.4189 c432.0635 229.4541 432.3037 229.5146 432.4844 229.6025 c432.8252 229.7695 432.9766 230.0244 432.9365 230.3662 c432.9131 230.5664 432.8076 230.71 432.6201 230.7988 c432.4316 230.8857 432.1436 230.9473 431.7549 230.9844 c431.0889 231.0518 L430.4355 231.1191 429.9756 231.2227 429.71 231.3613 c429.2607 231.5918 429.001 232.0039 428.9316 232.5986 c428.8682 233.1416 429.0156 233.6152 429.373 234.0205 c429.7305 234.4268 430.2969 234.6748 431.0713 234.7646 c431.7178 234.8408 432.2891 234.7354 432.7852 234.4492 c433.2813 234.1631 433.5781 233.6982 433.6758 233.0557 c432.4502 232.9121 L432.3848 233.2754 432.1934 233.5156 431.874 233.6348 c431.6611 233.7129 431.4053 233.7344 431.1064 233.6992 c430.7744 233.6602 430.5166 233.5635 430.334 233.4092 c430.1514 233.2539 430.0732 233.0586 430.1006 232.8232 c430.126 232.6064 430.2432 232.4561 430.4512 232.3721 c430.585 232.3154 430.8613 232.2637 431.2813 232.2158 c432.3682 232.0898 L432.8447 232.0352 433.2109 231.9287 433.4648 231.7725 c433.8604 231.5293 434.0889 231.1387 434.1523 230.5986 c434.2168 230.0449 434.0566 229.5596 433.6729 229.1436 c433.2881 228.7285 432.7061 228.4746 431.9268 228.3838 c431.1309 228.291 430.4834 228.3984 429.9854 228.707 c429.4873 229.0146 429.2012 229.4854 429.127 230.1172 c430.3535 230.2607 Lf*U*u434.8672 235.1211 m436.0879 235.3906 L436.6309 232.9219 L438.4023 235.8994 L440.0137 236.2539 L438.1006 233.2539 L441.4561 230.2998 L439.8525 229.9473 L437.4336 232.1543 L436.9639 231.4092 L437.4043 229.4082 L436.1836 229.1396 l434.8672 235.1211 Lf*U*u442.7393 237.123 m444.123 237.582 L448.1006 232.4492 L446.7871 232.0127 L446.0146 233.0732 L443.875 232.3633 L443.8789 231.0469 L442.5986 230.6221 l442.7393 237.123 Lf1 D443.8721 233.4814 m445.3564 233.9746 L443.8652 236.0215 l443.8721 233.4814 Lf*U*u0 D452.168 234.1738 m449.4199 239.6484 L450.5654 240.2227 L451.6094 238.1416 L453.7041 239.1934 L452.6602 241.2744 L453.8047 241.8486 L456.5527 236.375 L455.4072 235.7998 L454.1807 238.2441 L452.0859 237.1924 L453.3125 234.749 l452.168 234.1738 Lf*U*u455.2861 244.7637 m456.2041 245.3574 L456.7393 244.5303 L455.8203 243.9365 l455.2861 244.7637 Lf462.0947 240.4697 m461.9658 239.8193 461.5332 239.2578 460.7998 238.7832 c460.0664 238.3096 459.377 238.1465 458.7314 238.2949 c457.8945 238.4492 457.1777 238.9863 456.582 239.9082 c455.9746 240.8486 455.7783 241.7227 455.9941 242.5303 c456.123 243.1797 456.5547 243.7422 457.2881 244.2158 c458.0225 244.6904 458.7119 244.8525 459.3574 244.7041 c460.1797 244.5674 460.8955 244.0293 461.5029 243.0889 c462.0986 242.167 462.2959 241.2939 462.0947 240.4697 cf1 D456.6895 245.6709 m457.6084 246.2646 L458.1426 245.4375 L457.2246 244.8438 l456.6895 245.6709 Lf460.9141 240.8223 m460.9609 241.2949 460.7988 241.8184 460.4268 242.3936 c460.0566 242.9658 459.6465 243.3291 459.1963 243.4814 c458.7451 243.6338 458.3086 243.5732 457.8857 243.2998 c457.4629 243.0264 457.2266 242.6523 457.1758 242.1777 c457.126 241.7031 457.2871 241.1787 457.6582 240.6035 c458.0303 240.0283 458.4424 239.667 458.8955 239.5176 c459.3486 239.3691 459.7871 239.4307 460.21 239.7041 c460.6328 239.9775 460.8672 240.3506 460.9141 240.8223 cf*U*u0 D465.2422 247.5156 m464.9014 247.7783 464.5332 247.8545 464.1377 247.7451 c463.917 247.6826 463.707 247.5703 463.5088 247.4082 c463.1289 247.0967 462.9336 246.6973 462.9238 246.21 c462.9141 245.7236 463.1445 245.1934 463.6162 244.6182 c464.0908 244.0391 464.5586 243.7383 465.0205 243.7148 c465.4824 243.6914 465.8818 243.8174 466.2197 244.0947 c466.5508 244.3652 466.7441 244.6826 466.8008 245.0449 c466.8564 245.4072 466.7842 245.7617 466.582 246.1084 c465.4795 245.2051 L464.835 245.9902 L466.8047 247.6045 L468.8848 245.0674 L468.2324 244.5322 L467.6563 245.0498 L467.6494 244.6699 467.6074 244.3721 467.5313 244.1563 c467.4004 243.7822 467.1455 243.4395 466.7646 243.127 c466.1377 242.6123 465.4463 242.4082 464.6914 242.5137 c463.917 242.6074 463.2197 243.0313 462.6006 243.7871 c461.9736 244.5518 461.6816 245.3369 461.7246 246.1426 c461.7676 246.9482 462.1357 247.6357 462.8271 248.2031 c463.4277 248.6953 464.0352 248.9385 464.6484 248.9326 c465.2627 248.9268 465.7822 248.7188 466.208 248.3076 c465.2422 247.5156 Lf*U*u469.7598 248.5273 m469.9844 248.3594 470.1865 248.2676 470.3643 248.2529 c470.6895 248.2246 471.0293 248.3916 471.3848 248.752 c471.5986 248.9678 471.7471 249.166 471.833 249.3467 c471.9951 249.6914 471.9531 249.9844 471.709 250.2256 c471.5654 250.3672 471.3926 250.4131 471.1904 250.3652 c470.9902 250.3154 470.7266 250.1826 470.3994 249.9688 c469.8389 249.6055 L469.2861 249.249 468.8633 249.041 468.5693 248.9834 c468.0742 248.8818 467.6143 249.042 467.1875 249.4619 c466.7988 249.8457 466.6172 250.3076 466.6426 250.8477 c466.668 251.3877 466.9541 251.9355 467.502 252.4902 c467.959 252.9541 468.4707 253.2295 469.0361 253.3164 c469.6025 253.4043 470.125 253.2275 470.6035 252.7871 c469.7363 251.9082 L469.459 252.1504 469.1582 252.2178 468.835 252.1104 c468.6201 252.0381 468.4072 251.8955 468.1953 251.6807 c467.9609 251.4434 467.8203 251.2061 467.7744 250.9717 c467.7285 250.7363 467.79 250.5352 467.959 250.3691 c468.1152 250.2158 468.2998 250.1709 468.5146 250.2363 c468.6543 250.2754 468.9033 250.4082 469.2598 250.6328 c470.1875 251.2148 L470.5938 251.4697 470.9453 251.6162 471.2412 251.6533 c471.7012 251.7109 472.125 251.5488 472.5117 251.167 c472.9092 250.7754 473.0869 250.2979 473.0479 249.7324 c473.0078 249.168 472.7119 248.6064 472.1611 248.0479 c471.5986 247.4766 471.0264 247.1563 470.4443 247.085 c469.8633 247.0137 469.3457 247.2012 468.8926 247.6484 c469.7598 248.5273 Lf*U*u470.2402 255.1445 m471.0244 256.1191 L472.9932 254.5352 L472.5088 257.9658 L473.543 259.251 L473.9316 255.7139 L478.3965 255.5137 L477.3682 254.2334 L474.0996 254.4395 L474.2002 253.5645 L475.7969 252.2803 L475.0137 251.3066 l470.2402 255.1445 Lf*U*u481.416 261.1279 m481.5674 260.4824 481.4072 259.792 480.9355 259.0566 c480.4648 258.3213 479.9043 257.8877 479.2549 257.7559 c478.4297 257.5488 477.5547 257.7422 476.6309 258.334 c475.6885 258.9385 475.1475 259.6523 475.0098 260.4766 c474.8584 261.1221 475.0186 261.8125 475.4902 262.5479 c475.9609 263.2832 476.5215 263.7168 477.1709 263.8486 c477.9766 264.0654 478.8506 263.8711 479.793 263.2666 c480.7168 262.6748 481.2578 261.9619 481.416 261.1279 cf1 D480.1953 260.96 m480.043 261.4092 479.6777 261.8184 479.1016 262.1885 c478.5273 262.5566 478.0039 262.7168 477.5303 262.6689 c477.0566 262.6201 476.6846 262.3848 476.4131 261.9609 c476.1416 261.5371 476.0811 261.0986 476.2314 260.6465 c476.3818 260.1934 476.7461 259.7822 477.3223 259.4131 c477.8984 259.043 478.4238 258.8848 478.8984 258.9365 c479.373 258.9883 479.7451 259.2266 480.0176 259.6504 c480.2891 260.0742 480.3486 260.5107 480.1953 260.96 cf*U*u0 D477.8379 266.0781 m478.417 267.2207 L482.9033 264.9434 L484.2754 267.6465 L485.251 267.1514 L483.2988 263.3057 l477.8379 266.0781 Lf*U*u480.9072 272.6152 m481.4375 273.9736 L487.9277 273.7529 L487.4238 272.4639 L486.1143 272.5469 L485.2939 270.4473 L486.3086 269.6094 L485.8174 268.3535 l480.9072 272.6152 Lf1 D484.4316 271.1602 m485.001 272.6172 L482.4736 272.7773 l484.4316 271.1602 Lf*U*u0 D485.9248 280.2646 m486.1328 280.3887 486.3652 280.418 486.6221 280.3516 c486.8779 280.2861 487.0693 280.1475 487.1943 279.9375 c487.3203 279.7275 487.3496 279.4941 487.2832 279.2383 c487.2178 278.9814 487.0791 278.792 486.8682 278.668 c486.6563 278.5439 486.4229 278.5156 486.166 278.5811 c485.9102 278.6475 485.7207 278.7852 485.5986 278.9941 c485.4756 279.2041 485.4473 279.4375 485.5127 279.6934 c485.5791 279.9492 485.7168 280.1396 485.9248 280.2646 cf*UU-7770 495.6084 m8613 495.6084 L(N) *-7770 279.2754 m8613 279.2754 L(N) *-7770 285.6084 m8613 285.6084 L(N) *LB%AI5_EndLayer--%AI3_BeginCropsuserdict /AI3_noCropMarks known not {0 Auu0 R0 G0 J 0 j 0.5 w 4 M []0 d0 XR339.1426 219.7754 m312.1426 219.7754 LS348.1426 210.7754 m348.1426 183.7754 LSUu339.1426 370.8936 m312.1426 370.8936 LS348.1426 379.8936 m348.1426 406.8936 LSUu508.2607 370.8936 m535.2607 370.8936 LS499.2607 379.8936 m499.2607 406.8936 LSUu508.2607 219.7754 m535.2607 219.7754 LS499.2607 210.7754 m499.2607 183.7754 LSUU} if%AI3_EndCrops%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF